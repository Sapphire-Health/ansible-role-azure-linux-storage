- name: Prepare storage variables
  block:
    - name: Get EC2 instance info
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Name": "{{ inventory_hostname_short }}"
          instance-state-name: ["running"]
        region: "{{ hostvars[inventory_hostname].placement.region }}"
      register: ec2_instance
      delegate_to: localhost
    - name: Show EC2 instance info
      ansible.builtin.debug:
        msg: "{{ ec2_instance.instances[0].instance_id }}"
      delegate_to: localhost
    - name: Make sure one instance was returned
      ansible.builtin.fail:
        msg: "No instance found for {{ inventory_hostname_short }}"
      when: ec2_instance.instances | length == 0 or ec2_instance.instances | length > 1
      delegate_to: localhost
    - name: Show EC2 volume info
      ansible.builtin.debug:
        msg: "{{ inventory_hostname_short }}"
      delegate_to: localhost
    - name: Gather EC2 volume info
      amazon.aws.ec2_vol_info:
        filters:
          attachment.instance_id: "{{ ec2_instance.instances[0].instance_id }}"
        region: "{{ hostvars[inventory_hostname].placement.region }}"
      register: ec2_vol_info
      delegate_to: localhost
    - name: Show EC2 volume info
      ansible.builtin.debug:
        msg: "{{ ec2_vol_info }}"
      delegate_to: localhost
    - name: Get volume name to id mapping
      ansible.builtin.set_fact:
        vol_name_to_path: "{{ vol_name_to_path | default({}) | combine({item.tags.ansible_key: volpath}) }}"
      vars:
        volpath: "/dev/disk/by-id/nvme-Amazon_Elastic_Block_Store_{{ item.id | replace('-', '') }}"
      delegate_to: localhost
      when: item.tags.ansible_key is defined
      loop: "{{ ec2_vol_info.volumes }}"
    - name: Get volume name to id mapping
      ansible.builtin.debug:
        msg: "{{ vol_name_to_path }}"
      delegate_to: localhost
    - name: Get storage pools to path list mapping
      changed_when: false
      ansible.utils.update_fact:
        updates:
          - path: "storage_layout[{{ storage_pool_index }}].disks"
            value: >-
              {%- set disks = [] -%}
                {%- for disk in storage_pool.disks -%}
                {%- set disks = disks.append(vol_name_to_path[disk]) -%}
              {%- endfor -%}
              {{ disks }}
      delegate_to: localhost
      loop: "{{ storage_layout }}"
      loop_control:
        loop_var: storage_pool
        index_var: storage_pool_index
      register: updated
    # - name: Show storage layout
    #   ansible.builtin.debug:
    #     msg: "{{ updated.results[-1].storage_layout }}"
    #   delegate_to: localhost
    - name: Set storage pools to match modified storage layout from vars
      ansible.builtin.set_fact:
        storage_pools: "{{ updated.results[-1].storage_layout }}"
      delegate_to: localhost
    - name: Show storage layout
      ansible.builtin.debug:
        msg: "{{ storage_pools }}"
      delegate_to: localhost
- name: Provision Storage
  become: true
  block:
    - name: Install dependencies
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: present
      loop:
        - lvm2
    - name: Provision storage
      ansible.builtin.include_role:
        name: linux-system-roles.storage
