- name: Prepare storage variables
  block:
    - name: Get Azure VM info
      azure.azcollection.azure_rm_virtualmachine_info:
        name: "{{ inventory_hostname_short }}"
        resource_group: "{{ hostvars[inventory_hostname]['resource_group'] }}"
      register: vm
      delegate_to: localhost
    - name: Show Azure VM info
      ansible.builtin.debug:
        msg: "{{ vm.vms[0] }}"
      delegate_to: localhost
    - name: Make sure one VM was returned
      ansible.builtin.fail:
        msg: "No VM found for {{ inventory_hostname_short }}"
      when: vm.vms | length == 0 or vm.vms | length > 1
      delegate_to: localhost
    - name: Get facts for all managed disks managed by a specific VM
      azure.azcollection.azure_rm_manageddisk_info:
        name: "{{ disk.name }}"
        resource_group: "{{ hostvars[inventory_hostname]['resource_group'] }}"
      register: managed_disks
      delegate_to: localhost
      loop: "{{ vm.vms[0].data_disks }}"
      loop_control:
        loop_var: disk
    - name: Show managed disks info
      ansible.builtin.debug:
        msg: "{{ managed_disks.results[0].ansible_info }}"
      delegate_to: localhost
    - name: Get volume name to path mapping
      ansible.builtin.set_fact:
        vol_name_to_path: "{{ vol_name_to_path | default({}) | combine({disk_mapping.ansible_info.azure_managed_disk[0].tags.disk_label: volpath}) }}"
      vars:
        volpath: "/dev/disk/azure/scsi1/lun{{ disk_mapping.disk.lun }}"
      delegate_to: localhost
      when: disk_mapping.ansible_info.azure_managed_disk[0].tags.disk_label is defined
      loop: "{{ managed_disks.results }}"
      loop_control:
        loop_var: disk_mapping
    - name: Show volume name to path mapping
      ansible.builtin.debug:
        msg: "{{ vol_name_to_path }}"
      delegate_to: localhost
    - name: Check disk paths
      ansible.builtin.stat:
        path: "{{ item.value }}"
      loop: "{{ vol_name_to_path | dict2items }}"
      register: disk_paths
    - name: Make sure all paths exist and are symlinks
      ansible.builtin.fail:
        msg: "{{ path.stat.islnk }} is not a symlink"
      when: not path.stat.islnk
      loop: "{{ disk_paths.results }}"
      loop_control:
        loop_var: path
    - name: Get storage pools to path list mapping
      changed_when: false
      ansible.utils.update_fact:
        updates:
          - path: "storage_layout[{{ storage_pool_index }}].disks"
            value: >-
              {%- set disks = [] -%}
                {%- for disk in storage_pool.disks -%}
                {%- set disks = disks.append(vol_name_to_path[disk]) -%}
              {%- endfor -%}
              {{ disks }}
      delegate_to: localhost
      loop: "{{ storage_layout }}"
      loop_control:
        loop_var: storage_pool
        index_var: storage_pool_index
      register: updated
    # - name: Show storage layout
    #   ansible.builtin.debug:
    #     msg: "{{ updated.results[-1].storage_layout }}"
    #   delegate_to: localhost
    - name: Set storage pools to match modified storage layout from vars
      ansible.builtin.set_fact:
        storage_pools: "{{ updated.results[-1].storage_layout }}"
      delegate_to: localhost
    - name: Show storage layout
      ansible.builtin.debug:
        msg: "{{ storage_pools }}"
      delegate_to: localhost
- name: Provision Storage
  become: true
  block:
    - name: Install dependencies
      ansible.builtin.dnf:
        name: "{{ item }}"
        state: present
      loop:
        - lvm2
    - name: Provision storage
      ansible.builtin.include_role:
        name: linux-system-roles.storage
